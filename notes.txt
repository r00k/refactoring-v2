LoD
  I'll alternate pronunciation to troll everybody
  Define it
  Show sneaky violation
  It's really about DRY
    Structural vs Data
  The class is coupled to the current structure of the app
  I'd rather it be coupled just to the contract of its parameter
  You can ignore the definition though and focus on duplication
    We're allowing structural duplication in client code
    But also in specs
  Most say they *usually* follow it
    Isn't that good enough?
      No
        Beware of going back to fix things up
        You can't "just duplicate once" 
          Not on diff
      Story about trying to find root cause of difficulty behind a change
      Caring about duplication trough
  Tweet about stub_chain
  Objections
    chains using same type are okay
    I'll have all these boilerplate methods!
      delegate macro
      also, why is what you need so far from your starting object?
  How to NOT DRY up the problem:
    let_user_presenter_spec.rb
      problems
        you've STILL encoded the structure of the app in the test
        mystery guest causes obscurity - exercise refers to actors not in setup
        fragile tests from complicated fixture
          example: a test called "returns a default when no parent company exists"
        slow tests due to extra data
        violates OCP
  How you SHOULD DRY up the problem:
    call @user.company_name (_ not .)
    fix test
    call @user.parent_company_name (_ not .)
    consider extracting factory to stub user
      better than let since it's more general and reusable
  Point people to Avdi's post

Break: scary.rb
      
Dependency injection
  isn't exemplary, it's real
  isn't rails, so there's some small weirdness
  open PurchasesController
  where does km_http_client come from?
  benefits
    injecting this dependency makes testing easier
      can use a fake
      don't need to stub out KM-related methods
  costs
    indirection
      class variables and cattr_* are confusing
    divergent change
    hides implicit knowledge
  BEGIN
    open up kissmetrics_client_factory.rb and spec
    add first test for fake factory in test mode
    talk about sliming
    add test for non-test-mode, don't use fancy block
    refactor to block with ensure
    remove code from ApplicationController
    fixup tests
  benefits of new code
    still injecting dependency
    implicit is now implicitly captured
    indirection is lowered

Testing a conditional in the view
  Commit: 421572dcdbe78f7ae65f0a8be7a15919eb103cb3
  Integration
    slow, takes 0.3-0.5s each
    makes sure the user ACTUALLY sees it, important?
  View spec (_workshop.html.erb_spec.rb)
    fast
    isolated
    leaves the conditional in the view
  Helper
    https://github.com/thoughtbot/learn/pull/200/files#L6L-1
    fast
    isolated
    not very OO
      stateless functions
    doesn't confirm the user sees the text
    can encourage business logic leakage
      what if we have 5 helpers that duplicate this conditional?
  Presenter (viewable_workshop.rb)
    fast
    isolated
    gives a place for view-specific business logic to live
    that conditional is still ocurring in the view
  Polymorphic presenter (polymorphic_viewable_workshop)
    presenter choice in controller feels better
    only one conditional
    still exists though, which is due to a smell: type code

Todo
  opening 'slide'
  add learn plug
  type of demeter laws

Setup
  Clear history
  Clear desktop
  Clean up toolbar
  Load Avdi's blog post
  Load learn pull for km_http
  Learn learn in separate screen window with git show 421572dcdbe78f7ae65f0a8be7a15919eb103cb3
  Load learn pull: https://github.com/thoughtbot/learn/pull/200/files#L6L-1

