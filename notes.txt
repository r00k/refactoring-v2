LoD
  Most programmers know what LoD is
  Most say they *usually* follow it
  Isn't that good enough?
  You can't "just duplicate once"
    Story about trying to find root cause of difficulty behind a change
  Clarify chains using same type are okay
  Point people to Avdi's post
  let_user_presenter_spec.rb
    problems
      mystery guest causes obscurity - exercise refers to actors not in setup
      fragile tests from complicated fixture
        example: a test called "returns a default when no parent company exists"
      slow tests due to extra data
      violates OCP
    factory methods are okay
      
Dependency injection
  isn't exemplary, it's real
  isn't rails, so there's some small weirdness
  open PurchasesController
  where does km_http_client come from?
  benefits
    injecting this dependency makes testing easier
      don't need to stub out KM-related methods - good for integration
  costs
    indirection
      class variables and cattr_* are confusing
    hides implicit knowledge
  BEGIN
    open up kissmetrics_client_factory.rb and spec
    add first test for fake factory in test mode
    talk about sliming
    add test for non-test-mode, don't use fancy block
    refactor to block with ensure
    remove code from ApplicationController
    fixup tests
  benefits of new code
    still injecting dependency
    implicit is now implicitly captured
    indirection is lowered

View specs vs integration specs
  Side note: using pure mocks in views

Iceberg classes
  Listen to the tests

Todo
  opening 'slide'
  add learn plug

Setup
  Clear history
  Clear desktop
  Clean up toolbar
  Load Avdi's blog post
  Load learn pull for km_http

